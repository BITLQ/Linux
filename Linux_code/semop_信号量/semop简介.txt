【Linux】信号量semop操作参数中结构体sembuf简述

最近在学习进程间通信，学习到信号量的操作，认识到了semop函数；
semop函数的主要功能是负责对信号量的P/V操作；

semop函数原型：int semop( int semid, struct sembuf *sops, unsigned nsops);

以下是在网络上学习到的参数介绍：

semid：信号量标识符；
sops：指向一个结构体数组；为什么是数组？因为信号量可不一定为1个，当有多个信号量时，每一个信号量都需要有这样一个结构体；该结构体原型为：

struct sembuf
{
unsigned short sem_num; //标识信号量集中的某一信号量下标
short sem_op; // 标识对信号量的操作即 P/V操作
short sem_flag; // 调用方式，后面详细讲述
}；

当sem_op 为正数时，即V操作，反之P操作；

nsops ： nsops的作用就是表明上面sops所指向的结构体数组的个数；

shortflag详细讲述：

sem_flag第一种作用是表用信号量操作的调用方式：

当等于0时表示阻塞调用，当等于IPC_NOWAIT表示非阻塞调用；

第二种作用是当等于SEM_UNDO时，是对共享资源的一种保护机制，即当进程没有释放共享资源就结束的话，系统内核会自动释放资源，避免了资源死锁；或者是进程退出了，资源释放了，但是信号量没有变，这样的后果也是很可怕的，同样标志SEM_UNDO也可以解决；产生相反的操作，最后相加抵消，恢复信号量；

下面是对信号量semop操作的一个简单应用程序，代码寄存github链接如下：